Index: reflectionEx/reflectionEx.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/reflectionEx/reflectionEx.iml b/reflectionEx/reflectionEx.iml
new file mode 100644
--- /dev/null	(date 1723059901373)
+++ b/reflectionEx/reflectionEx.iml	(date 1723059901373)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="jdk" jdkName="21" jdkType="JavaSDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: reflectionEx/src/reflection/api/InvestigatorImp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/reflectionEx/src/reflection/api/InvestigatorImp.java b/reflectionEx/src/reflection/api/InvestigatorImp.java
new file mode 100644
--- /dev/null	(date 1723102961436)
+++ b/reflectionEx/src/reflection/api/InvestigatorImp.java	(date 1723102961436)
@@ -0,0 +1,102 @@
+package reflection.api;
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.Set;
+
+public class InvestigatorImp implements Investigator {
+
+    private Class clazz;
+    private Object obj;
+
+
+    @Override
+    public void load(Object anInstanceOfSomething)
+    {
+       this.clazz = anInstanceOfSomething.getClass();
+       this.obj = anInstanceOfSomething;
+    }
+
+    @Override
+    public int getTotalNumberOfFields() {
+        return clazz.getFields().length;
+    }
+
+    @Override
+    public int getTotalNumberOfMethods() {
+        return clazz.getMethods().length;
+    }
+
+    @Override
+    public int getTotalNumberOfConstructors() {
+        return clazz.getConstructors().length;
+    }
+
+    @Override
+    public int getCountOfStaticMethods() {
+        Method[] methods = clazz.getMethods();
+        int count = 0;
+        for(Method m : methods)
+        {
+            if(Modifier.isStatic((m.getModifiers())))
+                count++;
+        }
+        return count;
+    }
+    @Override
+    public int getCountOfConstantFields() {
+        Field[] fields = clazz.getFields();
+        int count = 0;
+        for (Field f : fields) {
+            if (Modifier.isFinal(f.getModifiers()))
+                count++;
+        }
+        return count;
+    }
+
+    @Override
+    public boolean isExtending() {
+        return false;
+    }
+
+    @Override
+    public boolean isParentClassAbstract() {
+        return false;
+    }
+
+    @Override
+    public int invokeMethodThatReturnsInt(String methodName, Object... args) {
+        return 0;
+    }
+
+    @Overridek
+    public Object createInstance(int numberOfArgs, Object... args) {
+        return null;
+    }
+
+    @Override
+    public Object elevateMethodAndInvoke(String name, Class<?>[] parametersTypes, Object... args) {
+        return null;
+    }
+
+    @Override
+    public Set<String> getAllImplementedInterfaces() {
+        return Set.of();
+    }
+
+    @Override
+    public String getInheritanceChain(String delimiter) {
+        return "";
+    }
+
+    @Override
+    public String getParentClassSimpleName() {
+        return "";
+    }
+
+    @Override
+    public Set<String> getNamesOfAllFieldsIncludingInheritanceChain() {
+        return Set.of();
+    }
+
+}
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1723059581066)
+++ b/.idea/misc.xml	(date 1723059581066)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="21 (2)" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: reflectionEx/src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/reflectionEx/src/Main.java b/reflectionEx/src/Main.java
new file mode 100644
--- /dev/null	(date 1723059901296)
+++ b/reflectionEx/src/Main.java	(date 1723059901296)
@@ -0,0 +1,5 @@
+public class Main {
+    public static void main(String[] args) {
+        System.out.println("Hello world!");
+    }
+}
\ No newline at end of file
Index: ReflectionProject.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ReflectionProject.iml b/ReflectionProject.iml
new file mode 100644
--- /dev/null	(date 1723059580968)
+++ b/ReflectionProject.iml	(date 1723059580968)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="GENERAL_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1723059901376)
+++ b/.idea/modules.xml	(date 1723059901376)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/ReflectionProject.iml" filepath="$PROJECT_DIR$/ReflectionProject.iml" />
+      <module fileurl="file://$PROJECT_DIR$/reflectionEx/reflectionEx.iml" filepath="$PROJECT_DIR$/reflectionEx/reflectionEx.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1723059585420)
+++ b/.idea/.gitignore	(date 1723059585420)
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
Index: reflectionEx/src/reflection/api/Investigator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/reflectionEx/src/reflection/api/Investigator.java b/reflectionEx/src/reflection/api/Investigator.java
new file mode 100644
--- /dev/null	(date 1723060430916)
+++ b/reflectionEx/src/reflection/api/Investigator.java	(date 1723060430916)
@@ -0,0 +1,146 @@
+package reflection.api;
+
+import java.util.Set;
+
+public interface Investigator {
+
+    /**
+     * loads in instance of a given class, which you will need to investigate through means of reflection
+     * and supply information on...
+     *
+     * @param anInstanceOfSomething an instance of an unknown type...
+     */
+    void load(Object anInstanceOfSomething);
+
+    /**
+     * returns the total number of the current class methods (not including the super class methods)
+     * the total number of methods includes all sorts of modifiers: private, public, static, protected etc.
+     * it does not contains constructors of any sort
+     *
+     * @return total number of methods
+     */
+    int getTotalNumberOfMethods();
+
+    /**
+     * returns the total number of constructors that this class has. (not including the super class constructors)
+     * the total number of constructors includes all sorts of modifiers: private, public, protected, default etc.
+     *
+     * @return total number of constructors
+     */
+    int getTotalNumberOfConstructors();
+
+    /**
+     * returns the total number of fields that this class has.
+     * the total number of fields DOES NOT include fields inherited from super class, if such exists
+     * and includes all fields of any type (final, static etc.)
+     *
+     * @return the total number of fields
+     */
+    int getTotalNumberOfFields();
+
+    /**
+     * returns the names of all the interfaces that this class implements
+     * (and NOT the ones that are being implemented by it's ancestor in the inheritance chain)
+     * Note that by name I mean simple, short Name that is only the interface name,
+     * and not its fully qualified name including the package it is located within...
+     *
+     * @return set of interfaces names
+     */
+    Set<String> getAllImplementedInterfaces();
+
+    /**
+     * returns total number of constant fields (=final), of any type (private, public, static etc.)
+     * (not including the super class fields)
+     * @return total number of constant fields
+     */
+    int getCountOfConstantFields();
+
+    /**
+     * returns total number of static methods, of any type (private, public etc.),
+     * that are declared on the instance itself (and not part of its inheritance chain)
+     *
+     * @return total number of static methods
+     */
+    int getCountOfStaticMethods();
+
+    /**
+     * checks if the given class extends a super class, that is not Object (which all extend by default, implicitly)
+     *
+     * @return true if the class extends, false otherwise
+     */
+    boolean isExtending();
+
+    /**
+     * get the name of the direct parent class
+     * the name of the class is the short, simple name and not the fully qualified name
+     *
+     * @return the name of the parent class. null if this class doesn't extend other class
+     */
+    String getParentClassSimpleName();
+
+    /**
+     * checks if the given class's direct parent is of abstract type
+     *
+     * @return true if the parent class is abstract, false otherwise (also in case the given class doe not extends any other class)
+     */
+    boolean isParentClassAbstract();
+
+    /**
+     * get all the names of all fields, including the ones coming from the inheritance chain
+     * all fields of any type should exists: private, public, protected, static etc.
+     *
+     * @return set of fields names
+     */
+    Set<String> getNamesOfAllFieldsIncludingInheritanceChain();
+
+    /**
+     * invokes a method that returns an int value, on the given instance.
+     * the method to invoke will be given by its name only.
+     * You can assume that there is exactly one such method and that
+     * the method is declared on the instance itself and not as part of its inheritance chain
+     *
+     * @param methodName the name of the method to invoke
+     * @param args the arguments to pass to the method, if such exists.
+     *             Note: You should not use the arguments in order to extract and identify the method.
+     *                   You can do that only (and simply) by its name.
+     *                   You just need to pass the arguments AS IS to the method invocation...
+     *
+     * @return the result returned from the method invocation
+     */
+    int invokeMethodThatReturnsInt(String methodName, Object... args);
+
+    /**
+     * creates a new instance of the given class, using a specific constructor,
+     * to be determined by the number of given arguments.
+     * No worries: there will be no ambiguity, i.e. two constructors that gets in 2 arguments each one of them...
+     * This method should act as a standalone and without any side effects, that is, the newly created
+     * instance SHOULD NOT replace the original given instance.
+     * @param numberOfArgs number of arguments that a specific constructor has. can be 0.
+     * @param args arguments to pass to the constructor
+     *
+     * @return the newly created instance
+     */
+    Object createInstance(int numberOfArgs, Object... args);
+
+    /**
+     * changes access control of a method and invokes it (== invokes a private method...)
+     * you can assume that the method exists by its name, and matched by the relevant parameters types.
+     * the method will appear in the current instance and will not belong to its inheritance chain
+     *
+     * @param name name of the method to change its access modifier
+     * @param parametersTypes the types of parameters the method accepts
+     * @param args arguments to pass to the method invocation AS IS (once elevated)
+     *
+     * @return the result from the method invocation
+     */
+    Object elevateMethodAndInvoke(String name, Class<?>[] parametersTypes, Object... args);
+
+    /**
+     * explores the inheritance chain of the object. returns a string representing the list of
+     * parents this class has, starting from Object, and ending at the class name.
+     * all classes names in the list should appear in their simple short name
+     * @param delimiter a string to put between each two classes in the chain (e.g. "->")
+     * @return a string denotes the inheritance chain.
+     * It can look like this (given a decimeter of "->"): Object-><class name>->...-><class name>
+     */
+    String getInheritanceChain(String delimiter);}
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1723072754461)
+++ b/.idea/vcs.xml	(date 1723072754461)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
